<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <assembly alias="System.Drawing" name="System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
  <data name="$this.Icon" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
    <value>
        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
        Q/9PpU7/m9Km/1OnUv9HoEP/R6BD/0egQ/9HoEP/R6BD+kWfRSUAAAAAAAAAAAAAAAAAAAAAAAAAAP+/
        vwTnxNBB6cPSROnD0kTpw9JE6cPSROnD0kTpw9JE6cPSROnD0kTpw9JE6cPSROnD0kTcv8ZIS6FG8Ueg
        Q/9HoEP/TqRL/6zcu//I7dz/rt69/0+lTv9HoEP/R6BD/0egQ/9HoEP/SKBDmQAAAAAAAAAAAAAAAAAA
        AAAAAAAA6sPRhOnE0f/pxNH/6cTR/+nE0f/pxNH/6cTR/+nE0f/pxNH/6cTR/+nE0f/pxNH/6cTR/8e8
        s/9HoEP/R6BD/06kS/+s3Lv/yO3c/8jt3P/I7dz/rt69/0+lTv9HoEP/R6BD/0egQ/9HoEPeAAAAAAAA
        AAAAAAAAAAAAAAAAAADpxdGq6cTR/+nE0f/pxNH/6cTR/+nE0f/pxNH/6cTR/+nE0f/pxNH/6cTR/+nE
        0f/pxNH/uLml/0egQ/9HoEP/e7+A/8jt3P+65cv/ZLJm/7ThxP/I7dz/s+HE/1OnUv9HoEP/R6BD/0eg
        Q/cAAAAAAAAAAAAAAAAAAAAAAAAAAOnF0arpxNH/6cTR/+nE0f/pxNH/6cTR/+nE0f/pxNH/6cTR/+nE
        0f/pxNH/6cTR/+nE0f+/uqz/R6BD/0egQ/9HoEP/h8eP/1qrWv9HoEP/VKhT/7bjxv/I7dz/s+HE/1On
        Uv9HoEP/R6BD6wAAAAAAAAAAAAAAAAAAAAAAAAAA6cXRqunE0f/pxNH/6cTR/+nE0f/pxNH/6cTR/+nE
        0f/pxNH/6cTR/+nE0f/pxNH/6cTR/97Bx/9LoUb/R6BD/0egQ/9HoEP/R6BD/0egQ/9HoEP/VqlU/7bi
        yP/I7dz/g8SK/0egQ/9GoUS1AAAAAAAAAAAAAAAAAAAAAAAAAADpxdGq6cTR/+nE0f/pxNH/6cTR/+nE
        0f/pxNH/6cTR/+nE0f/pxNH/6cTR/+nE0f/pxNH/6cTR/36scv9HoEP/R6BD/0egQ/9HoEP/R6BD/0eg
        Q/9HoEP/VqpW/4zJlP9IoET/R6BD/0ifRFIAAAAAAAAAAAAAAAAAAAAAAAAAAOrF0IPpxNH/6cTR/+nE
        0f/pxNH/6cTR/+nE0f/pxNH/6cTR/+nE0f/pxNH/6cTR/+nE0f/pxNH/07++/1KiTP9HoEP/R6BD/0eg
        Q/9HoEP/R6BD/0egQ/9HoEP/R6BD/0egQ/9IoES5AP8AAQAAAAAAAAAAAAAAAAAAAAAAAAAA/7+/BOnF
        0Ebqw9JV6sPSVerD0lXqw9JV6sPSVerD0lXqw9JV6sPSVerD0lXqw9JV6sPSVerD0lXqw9JVl7GJgEuh
        RvRHoEP/R6BD/0egQ/9HoEP/R6BD/0egQ/9HoEP/RqBDx0ecRxIAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAD/v78E58TQQenD0kTpw9JE6cPSROnD0kTpw9JE6cPSROnD0kTpw9JE6cPSROnD0kTpw9JE6cPSROnD
        0kTpw9JEr7ehXFikU8RIoET9R6BD/0egQ/9HoEP/R6BD8EegQ35JkkkHAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAOrD0YTpxNH/6cTR/+nE0f/pxNH/6cTR/+nE0f/pxNH/6cTR/+nE0f/pxNH/6cTR/+nE
        0f/pxNH/6cTR/+nE0f/pxNH/6cTR/9vBxf++u6v/vrur/623nZ9JkkkHAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAA6cXRqunE0f/pxNH/6cTR/+nE0f/pxNH/6cTR/+nE0f/pxNH/6cTR/+nE
        0f/pxNH/6cTR/+nE0f/pxNH/6cTR/+nE0f/pxNH/6cTR/+nE0f/pxNH/6cXRqgAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADpxdGq6cTR/+nE0f/pxNH/6cTR/+nE0f/pxNH/6cTR/+nE
        0f/pxNH/6cTR/+nE0f/pxNH/6cTR/+nE0f/pxNH/6cTR/+nE0f/pxNH/6cTR/+nE0f/pxdGqAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAOnF0arpxNH/6cTR/+nE0f/pxNH/6cTR/+nE
        0f/pxNH/6cTR/+nE0f/pxNH/6cTR/+nE0f/pxNH/6cTR/+nE0f/pxNH/6cTR/+nE0f/pxNH/6cTR/+nF
        0aoAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA6cXRqunE0f/pxNH/6cTR/+nE
        0f/pxNH/6cTR/+nE0f/pxNH/6cTR/+nE0f/pxNH/6cTR/+nE0f/pxNH/6cTR/+nE0f/pxNH/6cTR/+nE
        0f/pxNH/6cXRqgAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADqxdCD6cTR/+nE
        0f/pxNH/6cTR/+nE0f/pxNH/6cTR/+nE0f/pxNH/6cTR/+nE0f/pxNH/6cTR/+nE0f/pxNH/6cTR/+nE
        0f/pxNH/6cTR/+nE0f/pxNKBAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAP+/
        vwTpxdBG6sPSVerD0lXqw9JV6sPSVerD0lXqw9JV6sPSVerD0lXqw9JV6sPSVerD0lXqw9JV6sPSVerD
        0lXqw9JV6sPSVerD0lXqw9JV6cXQRv+/vwQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAA/7+/BOfE0EHpw9JE6cPSROnD0kTpw9JE6cPSROnD0kTpw9JE6cPSROnD0kTpw9JE6cPSROnD
        0kTpw9JE6cPSROnD0kTpw9JE6cPSROnD0kTnxNBB/7+/BAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAADqw9GE6cTR/+nE0f/pxNH/6cTR/+nE0f/pxNH/6cTR/+nE0f/pxNH/6cTR/+nE
        0f/pxNH/6cTR/+nE0f/pxNH/6cTR/+nE0f/pxNH/6cTR/+nE0f/pxNKCAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAOnF0arpxNH/6cTR/+nE0f/pxNH/6cTR/+nE0f/pxNH/6cTR/+nE
        0f/pxNH/6cTR/+nE0f/pxNH/6cTR/+nE0f/pxNH/6cTR/+nE0f/pxNH/6cTR/+nF0aoAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA6cXRqunE0f/pxNH/6cTR/+nE0f/pxNH/6cTR/+nE
        0f/pxNH/6cTR/+nE0f/pxNH/6cTR/+nE0f/pxNH/6cTR/+nE0f/pxNH/6cTR/+nE0f/pxNH/6cXRqgAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADpxdGq6cTR/+nE0f/pxNH/6cTR/+nE
        0f/pxNH/6cTR/+nE0f/pxNH/6cTR/+nE0f/pxNH/6cTR/+nE0f/pxNH/6cTR/+nE0f/pxNH/6cTR/+nE
        0f/pxdGqAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAOnF0arpxNH/6cTR/+nE
        0f/pxNH/6cTR/+nE0f/pxNH/6cTR/+nE0f/pxNH/6cTR/+nE0f/pxNH/6cTR/+nE0f/pxNH/6cTR/+nE
        0f/pxNH/6cTR/+nF0aoAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA6sXQg+nE
        0f/pxNH/6cTR/+nE0f/pxNH/6cTR/+nE0f/pxNH/6cTR/+nE0f/pxNH/6cTR/+nE0f/pxNH/6cTR/+nE
        0f/pxNH/6cTR/+nE0f/pxNH/6cTSgQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAD/v78E6cXQRurD0lXqw9JV6sPSVerD0lXqw9JV6sPSVerD0lXqw9JV6sPSVerD0lXqw9JV6sPSVerD
        0lXqw9JV6sPSVerD0lXqw9JV6sPSVenF0Eb/v78EAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAP///g////gH///wA///8AH//+AA+AAAAPgAAAD4AAAA+AAAAPgA
        AAH4AAAB///wA////A/4AAAf+AAAH/gAAB/4AAAf+AAAH/gAAB////////////gAAB/4AAAf+AAAH/gA
        AB/4AAAf+AAAH///////////////////////////
</value>
  </data>
</root>